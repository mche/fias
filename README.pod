=pod

=encoding utf8

Доброго всем

¡ ¡ ¡ ALL GLORY TO GLORIA ! ! !


=head1 Закачка и обновление ФИАС в базу Постгрес Postgresql

Закачиваются и обновляются только адреса со значением "ACTSTATUS"=1. Поэтому "AOGUID" уникален.

=head2 Создать схему и таблицу

  psql ... < tables.sql

=head2 Два режима запуска скрипта fias.pl

Для работы скрипта нужны зависимости - смотреть в начале скрипта. Модуль Model::Base выложен в этом репозитории. Модуль Mojo::Pg::Che хотел использовать для асинхронной вставки строк, не пошло, можно заменить DBI, но пусть будет.

=head3 Режим 1. Полное скачивание последней версии ФИАС XML

Перед запуском лучше пересоздать таблицу fias."AddressObjects", чтобы не мешали индексы, если были.

  cd <папка где скрипт>
  perl fias.pl --complete=1

Вариант полной загрузки, если предварительно архив скачан и распакован вручную. Нужен только файл AS_ADDROBJ_*.XML

  cd <папка где скрипт>
  perl fias.pl --xmlfile=AS_ADDROBJ_20140601_f78af112-09a4-4a17-9eb2-3c40f45e402e.XML

После полной закачки накатить индексы:

  psql ... < indexes.sql


=head3 Режим 2. Накатывание обновлений


  cd <папка где скрипт>
  perl fias.pl

Ставить эту команду в крон-сервис на ежедневный заход. Если сохраненная версия совпадет (нет обновления) - скрипт прервет работу.

=head4 crontab

  SHELL=/bin/bash
  BASH_ENV=$HOME/.bashrc
  PB='perlbrew use perl-5.25.6'

  0 12 * * * eval $PB; cd ~/fias/ && perl fias.pl > fias.log 2>&1

В опциях скрипта или запуска нужно указать путь к программе unrar (системная переменная PATH другая когда работает крон)

  perl --unrar=/opt/bin/unrar fias.pl

=head2 Хранение версии

Версия сохраняется в той же таблице fias."AddressObjects" в строке "AOGUID"='00000000-0000-0000-0000-000000000000'

B<"SHORTNAME"> - номер последней  версии

B<"OFFNAME"> - номера версий

B<"FORMALNAME"> - описание версий

B<"UPDATEDATE"> - дата обновления (дата отработки скрипта)

B<"ENDDATE"> - дата версии

B<"STARTDATE"> - вообще, дата начала всех запусков скрипта, т.е. устанавливается однократно при первом запуске, последующие запуски не изменяют это поле


  select *
  from fias."AddressObjects"
  where "AOGUID"='00000000-0000-0000-0000-000000000000';

=head2 Функции

Добавляются в схему fias.

  psql ... < functions.sql

=head3 Поиск адреса - fias.search_address(text[])

На входе: массив регулярок поиска. B<ВАЖНО> - от малого адреса к большему и приведенные к нижнему регистру.

Возвращает: массивы колонок ("AOGUID" uuid[], "PARENTGUID" uuid[], "AOLEVEL" int2[], "FORMALNAME" text[], "SHORTNAME" varchar(10)[],  id int[]) и условные веса (weight int, weight_formalname int).

Первые элементы "AOGUID"[1] и id[1] - уникальные идентификаторы найденного адреса, которые нужно сохранять в своих таблицах. Разворачивание адреса по его AOGUID - см. ниже функцию fias.aoguid_parents_array(uuid)

Вес weight нужен для сортировки предпочтительного адреса.

Пример:

  select *
  from fias.search_address('{\\mкрасный яр, \\mсамар}'::text[]) -- \m - начало слова
  order by
    array_to_string("AOLEVEL", '')::int,
    weight desc,
    array_to_string("FORMALNAME", '')
  limit 10
  ;

=head3 Сборка адреса по всем "родителям" - fias.aoguid_parents(uuid)

На входе: AOGUID адреса

На выходе: рекурсивная сборка родительских строк таблицы fias."AddressObjects" для указанного AOGUID

Пример:

  select *
  from fias.aoguid_parents('51f21baa-c804-4737-9d5f-9da7a3bb1598')
  order by "AOLEVEL"
  ;

=head3 Сборка адреса по всем "родителям" в одну строку - fias.aoguid_parents_array(uuid)

На входе: AOGUID адреса

На выходе: (uuid uuid, "FORMALNAME" text[], "SHORTNAME" varchar(10)[], "AOGUID" uuid[], "PARENTGUID" uuid[], "AOLEVEL" int2[], id int[]).

Массивы соответственно рекурсивные сборки от текущей адресной строки до верха "родителей".

"AOGUID"[1] cоответствует входному/выходному uuid.

Пример:

  select *
  from fias.aoguid_parents_array('51f21baa-c804-4737-9d5f-9da7a3bb1598')
  ;



=cut